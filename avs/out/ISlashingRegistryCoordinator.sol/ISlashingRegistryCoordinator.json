{"abi":[{"type":"function","name":"OPERATOR_CHURN_APPROVAL_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"PUBKEY_REGISTRATION_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"allocationManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAllocationManager"}],"stateMutability":"view"},{"type":"function","name":"avs","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"blsApkRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IBLSApkRegistry"}],"stateMutability":"view"},{"type":"function","name":"calculateOperatorChurnApprovalDigestHash","inputs":[{"name":"registeringOperator","type":"address","internalType":"address"},{"name":"registeringOperatorId","type":"bytes32","internalType":"bytes32"},{"name":"operatorKickParams","type":"tuple[]","internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorKickParam[]","components":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"operator","type":"address","internalType":"address"}]},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"calculatePubkeyRegistrationMessageHash","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"churnApprover","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"createSlashableStakeQuorum","inputs":[{"name":"operatorSetParams","type":"tuple","internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","components":[{"name":"maxOperatorCount","type":"uint32","internalType":"uint32"},{"name":"kickBIPsOfOperatorStake","type":"uint16","internalType":"uint16"},{"name":"kickBIPsOfTotalStake","type":"uint16","internalType":"uint16"}]},{"name":"minimumStake","type":"uint96","internalType":"uint96"},{"name":"strategyParams","type":"tuple[]","internalType":"struct IStakeRegistryTypes.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"lookAheadPeriod","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createTotalDelegatedStakeQuorum","inputs":[{"name":"operatorSetParams","type":"tuple","internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","components":[{"name":"maxOperatorCount","type":"uint32","internalType":"uint32"},{"name":"kickBIPsOfOperatorStake","type":"uint16","internalType":"uint16"},{"name":"kickBIPsOfTotalStake","type":"uint16","internalType":"uint16"}]},{"name":"minimumStake","type":"uint96","internalType":"uint96"},{"name":"strategyParams","type":"tuple[]","internalType":"struct IStakeRegistryTypes.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"operatorSetIds","type":"uint32[]","internalType":"uint32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"ejectOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"ejectionCooldown","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ejector","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCurrentQuorumBitmap","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint192","internalType":"uint192"}],"stateMutability":"view"},{"type":"function","name":"getOperator","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorInfo","components":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"status","type":"uint8","internalType":"enum ISlashingRegistryCoordinatorTypes.OperatorStatus"}]}],"stateMutability":"view"},{"type":"function","name":"getOperatorFromId","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getOperatorId","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getOperatorSetParams","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"tuple","internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","components":[{"name":"maxOperatorCount","type":"uint32","internalType":"uint32"},{"name":"kickBIPsOfOperatorStake","type":"uint16","internalType":"uint16"},{"name":"kickBIPsOfTotalStake","type":"uint16","internalType":"uint16"}]}],"stateMutability":"view"},{"type":"function","name":"getOperatorStatus","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint8","internalType":"enum ISlashingRegistryCoordinatorTypes.OperatorStatus"}],"stateMutability":"view"},{"type":"function","name":"getQuorumBitmapAtBlockNumberByIndex","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint192","internalType":"uint192"}],"stateMutability":"view"},{"type":"function","name":"getQuorumBitmapHistoryLength","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getQuorumBitmapIndicesAtBlockNumber","inputs":[{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"operatorIds","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"","type":"uint32[]","internalType":"uint32[]"}],"stateMutability":"view"},{"type":"function","name":"getQuorumBitmapUpdateByIndex","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct ISlashingRegistryCoordinatorTypes.QuorumBitmapUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"quorumBitmap","type":"uint192","internalType":"uint192"}]}],"stateMutability":"view"},{"type":"function","name":"indexRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IIndexRegistry"}],"stateMutability":"view"},{"type":"function","name":"isChurnApproverSaltUsed","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lastEjectionTimestamp","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"pubkeyRegistrationMessageHash","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct BN254.G1Point","components":[{"name":"X","type":"uint256","internalType":"uint256"},{"name":"Y","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"quorumCount","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"quorumUpdateBlockNumber","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"registerOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"operatorSetIds","type":"uint32[]","internalType":"uint32[]"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setAVS","inputs":[{"name":"_avs","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setChurnApprover","inputs":[{"name":"_churnApprover","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setEjectionCooldown","inputs":[{"name":"_ejectionCooldown","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setEjector","inputs":[{"name":"_ejector","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setOperatorSetParams","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"operatorSetParams","type":"tuple","internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","components":[{"name":"maxOperatorCount","type":"uint32","internalType":"uint32"},{"name":"kickBIPsOfOperatorStake","type":"uint16","internalType":"uint16"},{"name":"kickBIPsOfTotalStake","type":"uint16","internalType":"uint16"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"socketRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ISocketRegistry"}],"stateMutability":"view"},{"type":"function","name":"stakeRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStakeRegistry"}],"stateMutability":"view"},{"type":"function","name":"supportsAVS","inputs":[{"name":"avs","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"updateOperators","inputs":[{"name":"operators","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateOperatorsForQuorum","inputs":[{"name":"operatorsPerQuorum","type":"address[][]","internalType":"address[][]"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateSocket","inputs":[{"name":"socket","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"AVSUpdated","inputs":[{"name":"prevAVS","type":"address","indexed":false,"internalType":"address"},{"name":"newAVS","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ChurnApproverUpdated","inputs":[{"name":"prevChurnApprover","type":"address","indexed":false,"internalType":"address"},{"name":"newChurnApprover","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"EjectionCooldownUpdated","inputs":[{"name":"prevEjectionCooldown","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newEjectionCooldown","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"EjectorUpdated","inputs":[{"name":"prevEjector","type":"address","indexed":false,"internalType":"address"},{"name":"newEjector","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorDeregistered","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"operatorId","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"operatorId","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"OperatorSetParamsUpdated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"operatorSetParams","type":"tuple","indexed":false,"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","components":[{"name":"maxOperatorCount","type":"uint32","internalType":"uint32"},{"name":"kickBIPsOfOperatorStake","type":"uint16","internalType":"uint16"},{"name":"kickBIPsOfTotalStake","type":"uint16","internalType":"uint16"}]}],"anonymous":false},{"type":"event","name":"OperatorSocketUpdate","inputs":[{"name":"operatorId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"socket","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"QuorumBlockNumberUpdated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"blocknumber","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"QuorumCreated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"operatorSetParams","type":"tuple","indexed":false,"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","components":[{"name":"maxOperatorCount","type":"uint32","internalType":"uint32"},{"name":"kickBIPsOfOperatorStake","type":"uint16","internalType":"uint16"},{"name":"kickBIPsOfTotalStake","type":"uint16","internalType":"uint16"}]},{"name":"minimumStake","type":"uint96","indexed":false,"internalType":"uint96"},{"name":"strategyParams","type":"tuple[]","indexed":false,"internalType":"struct IStakeRegistryTypes.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"stakeType","type":"uint8","indexed":false,"internalType":"enum IStakeRegistryTypes.StakeType"},{"name":"lookAheadPeriod","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"error","name":"AlreadyRegisteredForQuorums","inputs":[]},{"type":"error","name":"BitmapCannotBeZero","inputs":[]},{"type":"error","name":"BitmapEmpty","inputs":[]},{"type":"error","name":"CannotChurnSelf","inputs":[]},{"type":"error","name":"CannotKickOperatorAboveThreshold","inputs":[]},{"type":"error","name":"CannotReregisterYet","inputs":[]},{"type":"error","name":"ChurnApproverSaltUsed","inputs":[]},{"type":"error","name":"InputLengthMismatch","inputs":[]},{"type":"error","name":"InsufficientStakeForChurn","inputs":[]},{"type":"error","name":"InvalidAVS","inputs":[]},{"type":"error","name":"InvalidRegistrationType","inputs":[]},{"type":"error","name":"LookAheadPeriodTooLong","inputs":[]},{"type":"error","name":"MaxOperatorCountReached","inputs":[]},{"type":"error","name":"MaxQuorumsReached","inputs":[]},{"type":"error","name":"NotRegistered","inputs":[]},{"type":"error","name":"NotRegisteredForQuorum","inputs":[]},{"type":"error","name":"NotSorted","inputs":[]},{"type":"error","name":"OnlyAllocationManager","inputs":[]},{"type":"error","name":"OnlyEjector","inputs":[]},{"type":"error","name":"OperatorNotRegistered","inputs":[]},{"type":"error","name":"OperatorNotRegisteredForQuorum","inputs":[]},{"type":"error","name":"QuorumDoesNotExist","inputs":[]},{"type":"error","name":"QuorumOperatorCountMismatch","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"OPERATOR_CHURN_APPROVAL_TYPEHASH()":"ca0de882","PUBKEY_REGISTRATION_TYPEHASH()":"9feab859","allocationManager()":"ca8aa7c7","avs()":"de1164bb","blsApkRegistry()":"5df45946","calculateOperatorChurnApprovalDigestHash(address,bytes32,(uint8,address)[],bytes32,uint256)":"84ca5213","calculatePubkeyRegistrationMessageHash(address)":"73447992","churnApprover()":"054310e6","createSlashableStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[],uint32)":"3eef3a51","createTotalDelegatedStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[])":"8281ab75","deregisterOperator(address,address,uint32[])":"303ca956","ejectOperator(address,bytes)":"6e3b17db","ejectionCooldown()":"a96f783e","ejector()":"28f61b31","getCurrentQuorumBitmap(bytes32)":"871ef049","getOperator(address)":"5865c60c","getOperatorFromId(bytes32)":"296bb064","getOperatorId(address)":"13542a4e","getOperatorSetParams(uint8)":"e65797ad","getOperatorStatus(address)":"fd39105a","getQuorumBitmapAtBlockNumberByIndex(bytes32,uint32,uint256)":"04ec6351","getQuorumBitmapHistoryLength(bytes32)":"03fd3492","getQuorumBitmapIndicesAtBlockNumber(uint32,bytes32[])":"c391425e","getQuorumBitmapUpdateByIndex(bytes32,uint256)":"1eb812da","indexRegistry()":"9e9923c2","isChurnApproverSaltUsed(bytes32)":"1478851f","lastEjectionTimestamp(address)":"125e0584","pubkeyRegistrationMessageHash(address)":"3c2a7f4c","quorumCount()":"9aa1653d","quorumUpdateBlockNumber(uint8)":"249a0c42","registerOperator(address,address,uint32[],bytes)":"c63fd502","setAVS(address)":"a65497c6","setChurnApprover(address)":"29d1e0c3","setEjectionCooldown(uint256)":"0d3f2134","setEjector(address)":"2cdd1e86","setOperatorSetParams(uint8,(uint32,uint16,uint16))":"5b0b829f","socketRegistry()":"ea32afae","stakeRegistry()":"68304835","supportsAVS(address)":"b5265787","updateOperators(address[])":"00cf2ab5","updateOperatorsForQuorum(address[][],bytes)":"5140a548","updateSocket(string)":"0cf4b767"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyRegisteredForQuorums\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BitmapCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BitmapEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotChurnSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotKickOperatorAboveThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReregisterYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChurnApproverSaltUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStakeForChurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAVS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegistrationType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LookAheadPeriodTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxOperatorCountReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxQuorumsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRegisteredForQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAllocationManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEjector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotRegisteredForQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuorumDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuorumOperatorCountMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAVS\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAVS\",\"type\":\"address\"}],\"name\":\"AVSUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevChurnApprover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newChurnApprover\",\"type\":\"address\"}],\"name\":\"ChurnApproverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevEjectionCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEjectionCooldown\",\"type\":\"uint256\"}],\"name\":\"EjectionCooldownUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEjector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEjector\",\"type\":\"address\"}],\"name\":\"EjectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"OperatorDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam\",\"name\":\"operatorSetParams\",\"type\":\"tuple\"}],\"name\":\"OperatorSetParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"OperatorSocketUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"}],\"name\":\"QuorumBlockNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam\",\"name\":\"operatorSetParams\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct IStakeRegistryTypes.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"enum IStakeRegistryTypes.StakeType\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lookAheadPeriod\",\"type\":\"uint32\"}],\"name\":\"QuorumCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_CHURN_APPROVAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBKEY_REGISTRATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationManager\",\"outputs\":[{\"internalType\":\"contract IAllocationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blsApkRegistry\",\"outputs\":[{\"internalType\":\"contract IBLSApkRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registeringOperator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"registeringOperatorId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorKickParam[]\",\"name\":\"operatorKickParams\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateOperatorChurnApprovalDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"calculatePubkeyRegistrationMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"churnApprover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam\",\"name\":\"operatorSetParams\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistryTypes.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"lookAheadPeriod\",\"type\":\"uint32\"}],\"name\":\"createSlashableStakeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam\",\"name\":\"operatorSetParams\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistryTypes.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"createTotalDelegatedStakeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorSetIds\",\"type\":\"uint32[]\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"ejectOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ejectionCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ejector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentQuorumBitmap\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ISlashingRegistryCoordinatorTypes.OperatorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorFromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getOperatorSetParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorStatus\",\"outputs\":[{\"internalType\":\"enum ISlashingRegistryCoordinatorTypes.OperatorStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getQuorumBitmapAtBlockNumberByIndex\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"getQuorumBitmapHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"operatorIds\",\"type\":\"bytes32[]\"}],\"name\":\"getQuorumBitmapIndicesAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getQuorumBitmapUpdateByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"quorumBitmap\",\"type\":\"uint192\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.QuorumBitmapUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexRegistry\",\"outputs\":[{\"internalType\":\"contract IIndexRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"isChurnApproverSaltUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"lastEjectionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"pubkeyRegistrationMessageHash\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct BN254.G1Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"quorumUpdateBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorSetIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"setAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_churnApprover\",\"type\":\"address\"}],\"name\":\"setChurnApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ejectionCooldown\",\"type\":\"uint256\"}],\"name\":\"setEjectionCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ejector\",\"type\":\"address\"}],\"name\":\"setEjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam\",\"name\":\"operatorSetParams\",\"type\":\"tuple\"}],\"name\":\"setOperatorSetParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socketRegistry\",\"outputs\":[{\"internalType\":\"contract ISocketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contract IStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"}],\"name\":\"supportsAVS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"updateOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"operatorsPerQuorum\",\"type\":\"address[][]\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"updateOperatorsForQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"updateSocket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AVSUpdated(address,address)\":{\"params\":{\"newAVS\":\"The new AVS address.\",\"prevAVS\":\"The previous AVS address.\"}},\"ChurnApproverUpdated(address,address)\":{\"details\":\"Emitted in _setChurnApprover().\",\"params\":{\"newChurnApprover\":\"The new churn approver address.\",\"prevChurnApprover\":\"The previous churn approver address.\"}},\"EjectionCooldownUpdated(uint256,uint256)\":{\"details\":\"Emitted in setEjectionCooldown().\",\"params\":{\"newEjectionCooldown\":\"The new cooldown duration in seconds.\",\"prevEjectionCooldown\":\"The previous cooldown duration in seconds.\"}},\"EjectorUpdated(address,address)\":{\"details\":\"Emitted in _setEjector().\",\"params\":{\"newEjector\":\"The new ejector address.\",\"prevEjector\":\"The previous ejector address.\"}},\"OperatorDeregistered(address,bytes32)\":{\"details\":\"Emitted in _deregisterOperator().\",\"params\":{\"operator\":\"The address of the deregistered operator.\",\"operatorId\":\"The unique identifier of the operator (BLS public key hash).\"}},\"OperatorRegistered(address,bytes32)\":{\"details\":\"Emitted in _registerOperator() and _registerOperatorToOperatorSet().\",\"params\":{\"operator\":\"The address of the registered operator.\",\"operatorId\":\"The unique identifier of the operator (BLS public key hash).\"}},\"OperatorSetParamsUpdated(uint8,(uint32,uint16,uint16))\":{\"details\":\"Emitted in _setOperatorSetParams().\",\"params\":{\"operatorSetParams\":\"The new operator set parameters for the quorum.\",\"quorumNumber\":\"The identifier of the quorum being updated.\"}},\"OperatorSocketUpdate(bytes32,string)\":{\"details\":\"Emitted in updateSocket().\",\"params\":{\"operatorId\":\"The unique identifier of the operator (BLS public key hash).\",\"socket\":\"The new socket address for the operator (typically an IP address).\"}},\"QuorumBlockNumberUpdated(uint8,uint256)\":{\"details\":\"Emitted in updateOperatorsForQuorum().\",\"params\":{\"blocknumber\":\"The block number at which the quorum update occurred.\",\"quorumNumber\":\"The identifier of the quorum being updated.\"}},\"QuorumCreated(uint8,(uint32,uint16,uint16),uint96,(address,uint96)[],uint8,uint32)\":{\"params\":{\"lookAheadPeriod\":\"The number of blocks to look ahead when calculating slashable stake (only used for TOTAL_SLASHABLE).\",\"minimumStake\":\"The minimum stake required for operators in this quorum.\",\"operatorSetParams\":\"The operator set parameters for the quorum.\",\"quorumNumber\":\"The identifier of the quorum being created.\",\"stakeType\":\"The type of stake being tracked (TOTAL_DELEGATED or TOTAL_SLASHABLE).\",\"strategyParams\":\"The strategy parameters for stake calculation.\"}}},\"kind\":\"dev\",\"methods\":{\"OPERATOR_CHURN_APPROVAL_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash constant.\"}},\"PUBKEY_REGISTRATION_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash constant.\"}},\"allocationManager()\":{\"details\":\"This is only relevant for Slashing AVSs\",\"returns\":{\"_0\":\"The AllocationManager contract interface.\"}},\"avs()\":{\"details\":\"NOTE: Updating this value will break existing OperatorSets and UAM integration. This value should only be set once.\",\"returns\":{\"_0\":\"The avs address\"}},\"blsApkRegistry()\":{\"returns\":{\"_0\":\"The BLSApkRegistry contract interface.\"}},\"calculateOperatorChurnApprovalDigestHash(address,bytes32,(uint8,address)[],bytes32,uint256)\":{\"params\":{\"expiry\":\"Timestamp after which the signature becomes invalid.\",\"operatorKickParams\":\"Parameters specifying which operators to replace in full quorums.\",\"registeringOperator\":\"The address of the operator attempting to register.\",\"registeringOperatorId\":\"The unique ID of the registering operator.\",\"salt\":\"Random value to ensure signature uniqueness.\"},\"returns\":{\"_0\":\"The EIP-712 typed data hash to be signed.\"}},\"calculatePubkeyRegistrationMessageHash(address)\":{\"params\":{\"operator\":\"The operator's Ethereum address\"}},\"churnApprover()\":{\"returns\":{\"_0\":\"The churn approver address.\"}},\"createSlashableStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[],uint32)\":{\"details\":\"Can only be called when operator sets are enabled.\",\"params\":{\"lookAheadPeriod\":\"The number of blocks to look ahead when calculating slashable stake.\",\"minimumStake\":\"Sets the minimum stake required for an operator to register or remain registered.\",\"operatorSetParams\":\"Configures the quorum's max operator count and churn parameters.\",\"strategyParams\":\"A list of strategies and multipliers used by the StakeRegistry to calculate an operator's stake weight for the quorum.\"}},\"createTotalDelegatedStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[])\":{\"details\":\"For m2 AVS this function has the same behavior as createQuorum before.For migrated AVS that enable operator sets this will create a quorum that measures total delegated stake for operator set.\",\"params\":{\"minimumStake\":\"Sets the minimum stake required for an operator to register or remain registered.\",\"operatorSetParams\":\"Configures the quorum's max operator count and churn parameters.\",\"strategyParams\":\"A list of strategies and multipliers used by the StakeRegistry to calculate an operator's stake weight for the quorum.\"}},\"deregisterOperator(address,address,uint32[])\":{\"params\":{\"avs\":\"the AVS the operator is deregistering from. This should be the same as IAVSRegistrar.avs()\",\"operator\":\"the deregistering operator\",\"operatorSetIds\":\"the list of operator set ids being deregistered from\"}},\"ejectOperator(address,bytes)\":{\"details\":\"Can only be called by the ejector address.The operator cannot re-register until ejectionCooldown period has passed.\",\"params\":{\"operator\":\"The operator address to eject.\",\"quorumNumbers\":\"The quorum numbers to eject the operator from.\"}},\"ejectionCooldown()\":{\"returns\":{\"_0\":\"The cooldown duration in seconds.\"}},\"ejector()\":{\"returns\":{\"_0\":\"The ejector address.\"}},\"getCurrentQuorumBitmap(bytes32)\":{\"details\":\"Returns 0 if the operator is not registered for any quorums.\",\"params\":{\"operatorId\":\"The operator's unique identifier.\"},\"returns\":{\"_0\":\"A bitmap where each bit represents registration in a specific quorum.\"}},\"getOperator(address)\":{\"params\":{\"operator\":\"The operator address to query.\"},\"returns\":{\"_0\":\"An OperatorInfo struct containing the operator's ID and registration status.\"}},\"getOperatorFromId(bytes32)\":{\"details\":\"Returns address(0) if the ID is not registered.\",\"params\":{\"operatorId\":\"The unique identifier to look up.\"},\"returns\":{\"_0\":\"The operator's address.\"}},\"getOperatorId(address)\":{\"params\":{\"operator\":\"The operator address to query.\"},\"returns\":{\"_0\":\"The operator's ID (derived from their BLS public key hash).\"}},\"getOperatorSetParams(uint8)\":{\"params\":{\"quorumNumber\":\"The identifier of the quorum to query.\"},\"returns\":{\"_0\":\"The OperatorSetParam struct containing max operator count and churn thresholds.\"}},\"getOperatorStatus(address)\":{\"params\":{\"operator\":\"The operator address to query.\"},\"returns\":{\"_0\":\"The operator's status (NEVER_REGISTERED, REGISTERED, or DEREGISTERED).\"}},\"getQuorumBitmapAtBlockNumberByIndex(bytes32,uint32,uint256)\":{\"details\":\"Reverts if the index is incorrect for the specified block number.\",\"params\":{\"blockNumber\":\"The historical block number to query.\",\"index\":\"The index in the operator's bitmap history (from getQuorumBitmapIndicesAtBlockNumber).\",\"operatorId\":\"The operator's unique identifier.\"},\"returns\":{\"_0\":\"The quorum bitmap showing which quorums the operator was registered for.\"}},\"getQuorumBitmapHistoryLength(bytes32)\":{\"params\":{\"operatorId\":\"The operator's unique identifier.\"},\"returns\":{\"_0\":\"The length of the bitmap history array.\"}},\"getQuorumBitmapIndicesAtBlockNumber(uint32,bytes32[])\":{\"details\":\"Reverts if any operator had not yet registered at the specified block.This function is designed to find proper inputs for getQuorumBitmapAtBlockNumberByIndex.\",\"params\":{\"blockNumber\":\"The historical block number to query.\",\"operatorIds\":\"Array of operator IDs to get indices for.\"},\"returns\":{\"_0\":\"Array of indices corresponding to each operator ID.\"}},\"getQuorumBitmapUpdateByIndex(bytes32,uint256)\":{\"params\":{\"index\":\"The index in the bitmap history to query.\",\"operatorId\":\"The operator's unique identifier.\"},\"returns\":{\"_0\":\"The QuorumBitmapUpdate struct at that index.\"}},\"indexRegistry()\":{\"returns\":{\"_0\":\"The IndexRegistry contract interface.\"}},\"isChurnApproverSaltUsed(bytes32)\":{\"params\":{\"salt\":\"The salt to check.\"},\"returns\":{\"_0\":\"True if the salt has been used, false otherwise.\"}},\"lastEjectionTimestamp(address)\":{\"params\":{\"operator\":\"The operator address.\"},\"returns\":{\"_0\":\"The timestamp of the last ejection.\"}},\"pubkeyRegistrationMessageHash(address)\":{\"params\":{\"operator\":\"The address of the operator registering their key.\"},\"returns\":{\"_0\":\"A point on the G1 curve representing the message hash.\"}},\"quorumCount()\":{\"returns\":{\"_0\":\"The count of quorums.\"}},\"quorumUpdateBlockNumber(uint8)\":{\"params\":{\"quorumNumber\":\"The quorum identifier.\"},\"returns\":{\"_0\":\"The block number of the last update.\"}},\"registerOperator(address,address,uint32[],bytes)\":{\"params\":{\"avs\":\"the AVS the operator is registering for. This should be the same as IAVSRegistrar.avs()\",\"data\":\"arbitrary data the operator can provide as part of registration\",\"operator\":\"the registering operator\",\"operatorSetIds\":\"the list of operator set ids being registered for\"}},\"setAVS(address)\":{\"details\":\"Can only be called by the contract ownerNOTE: Updating this value will break existing OperatorSets and UAM integration. This value should only be set once.\",\"params\":{\"_avs\":\"The new avs address\"}},\"setChurnApprover(address)\":{\"details\":\"Can only be called by the contract owner.The churn approver is responsible for signing off on operator replacements in full quorums.\",\"params\":{\"_churnApprover\":\"The new churn approver address.\"}},\"setEjectionCooldown(uint256)\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"_ejectionCooldown\":\"The new cooldown duration in seconds.\"}},\"setEjector(address)\":{\"details\":\"Can only be called by the contract owner.The ejector can force-remove operators from quorums regardless of their stake.\",\"params\":{\"_ejector\":\"The new ejector address.\"}},\"setOperatorSetParams(uint8,(uint32,uint16,uint16))\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"operatorSetParams\":\"The new operator set parameters to apply.\",\"quorumNumber\":\"The identifier of the quorum to update.\"}},\"socketRegistry()\":{\"returns\":{\"_0\":\"The SocketRegistry contract interface.\"}},\"stakeRegistry()\":{\"returns\":{\"_0\":\"The StakeRegistry contract interface.\"}},\"supportsAVS(address)\":{\"params\":{\"avs\":\"the AVS to check\"},\"returns\":{\"_0\":\"true if the AVS is supported, false otherwise\"}},\"updateOperators(address[])\":{\"details\":\"Stakes are queried from the Eigenlayer core DelegationManager contract.WILL BE DEPRECATED IN FAVOR OF updateOperatorsForQuorum\",\"params\":{\"operators\":\"The operators whose stakes should be updated.\"}},\"updateOperatorsForQuorum(address[][],bytes)\":{\"details\":\"stakes are queried from the Eigenlayer core DelegationManager contractEach list of operator addresses MUST be sorted in ascending orderEach list of operator addresses MUST represent the entire list of registered operators for the corresponding quoruminvariant: Each list of `operatorsPerQuorum` MUST be a sorted version of `IndexRegistry.getOperatorListAtBlockNumber` for the corresponding quorum.note on race condition: if an operator registers/deregisters for any quorum in `quorumNumbers` after a txn to this method is broadcast (but before it is executed), the method will fail\",\"params\":{\"operatorsPerQuorum\":\"for each quorum in `quorumNumbers`, this has a corresponding list of operators to update.\",\"quorumNumbers\":\"is an ordered byte array containing the quorum numbers being updated\"}},\"updateSocket(string)\":{\"details\":\"Will revert if msg.sender is not a registered operator.\",\"params\":{\"socket\":\"The new socket address for the operator (typically an IP address).\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyRegisteredForQuorums()\":[{\"notice\":\"Thrown when registering for already registered quorums.\"}],\"BitmapCannotBeZero()\":[{\"notice\":\"Thrown when updating to zero bitmap.\"}],\"BitmapEmpty()\":[{\"notice\":\"Thrown when registering/deregistering with empty bitmap.\"}],\"CannotChurnSelf()\":[{\"notice\":\"Thrown when operator attempts self-churn.\"}],\"CannotKickOperatorAboveThreshold()\":[{\"notice\":\"Thrown when attempting to kick operator above stake threshold.\"}],\"CannotReregisterYet()\":[{\"notice\":\"Thrown when registering before ejection cooldown expires.\"}],\"ChurnApproverSaltUsed()\":[{\"notice\":\"Thrown when churn approver salt is already used.\"}],\"InputLengthMismatch()\":[{\"notice\":\"Thrown when array lengths in input parameters don't match.\"}],\"InsufficientStakeForChurn()\":[{\"notice\":\"Thrown when operator has insufficient stake for churn.\"}],\"InvalidAVS()\":[{\"notice\":\"Thrown when the provided AVS address does not match the expected one.\"}],\"InvalidRegistrationType()\":[{\"notice\":\"Thrown when an invalid registration type is provided.\"}],\"LookAheadPeriodTooLong()\":[{\"notice\":\"Thrown when lookAheadPeriod is greater than or equal to DEALLOCATION_DELAY.\"}],\"MaxOperatorCountReached()\":[{\"notice\":\"Thrown when the number of operators in a quorum would exceed the maximum allowed.\"}],\"MaxQuorumsReached()\":[{\"notice\":\"Thrown when maximum quorum count is reached.\"}],\"NotRegistered()\":[{\"notice\":\"Thrown when unregistered operator attempts restricted operation.\"}],\"NotRegisteredForQuorum()\":[{\"notice\":\"Thrown when deregistering from unregistered quorum.\"}],\"NotSorted()\":[{\"notice\":\"Thrown when operators or quorums list is not sorted ascending.\"}],\"OnlyAllocationManager()\":[{\"notice\":\"Thrown when non-allocation manager calls restricted function.\"}],\"OnlyEjector()\":[{\"notice\":\"Thrown when non-ejector calls restricted function.\"}],\"OperatorNotRegistered()\":[{\"notice\":\"Thrown when attempting to kick an operator that is not registered.\"}],\"OperatorNotRegisteredForQuorum()\":[{\"notice\":\"Thrown when the operator is not registered for the quorum.\"}],\"QuorumDoesNotExist()\":[{\"notice\":\"Thrown when operating on a non-existent quorum.\"}],\"QuorumOperatorCountMismatch()\":[{\"notice\":\"Thrown when operator count doesn't match quorum requirements.\"}]},\"events\":{\"AVSUpdated(address,address)\":{\"notice\":\"Emitted when the AVS address is updated.\"},\"ChurnApproverUpdated(address,address)\":{\"notice\":\"Emitted when the churn approver address is updated.\"},\"EjectionCooldownUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the ejection cooldown period is updated.\"},\"EjectorUpdated(address,address)\":{\"notice\":\"Emitted when the ejector address is updated.\"},\"OperatorDeregistered(address,bytes32)\":{\"notice\":\"Emitted when an operator deregisters from service in one or more quorums.\"},\"OperatorRegistered(address,bytes32)\":{\"notice\":\"Emitted when an operator registers for service in one or more quorums.\"},\"OperatorSetParamsUpdated(uint8,(uint32,uint16,uint16))\":{\"notice\":\"Emitted when a quorum's operator set parameters are updated.\"},\"OperatorSocketUpdate(bytes32,string)\":{\"notice\":\"Emitted when an operator's socket is updated.\"},\"QuorumBlockNumberUpdated(uint8,uint256)\":{\"notice\":\"Emitted when all operators in a quorum are updated simultaneously.\"},\"QuorumCreated(uint8,(uint32,uint16,uint16),uint96,(address,uint96)[],uint8,uint32)\":{\"notice\":\"Emitted when a new quorum is created.\"}},\"kind\":\"user\",\"methods\":{\"OPERATOR_CHURN_APPROVAL_TYPEHASH()\":{\"notice\":\"EIP-712 typehash for operator churn approval signatures.\"},\"PUBKEY_REGISTRATION_TYPEHASH()\":{\"notice\":\"EIP-712 typehash for pubkey registration signatures.\"},\"allocationManager()\":{\"notice\":\"Reference to the AllocationManager contract.\"},\"avs()\":{\"notice\":\"Returns the avs address for this AVS (used for UAM integration in EigenLayer)\"},\"blsApkRegistry()\":{\"notice\":\"Reference to the BLSApkRegistry contract.\"},\"calculateOperatorChurnApprovalDigestHash(address,bytes32,(uint8,address)[],bytes32,uint256)\":{\"notice\":\"Calculates the digest hash that must be signed by the churn approver.\"},\"calculatePubkeyRegistrationMessageHash(address)\":{\"notice\":\"Returns the hash of the message that operators must sign with their BLS key to register\"},\"churnApprover()\":{\"notice\":\"The address authorized to approve operator churn operations.\"},\"createSlashableStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[],uint32)\":{\"notice\":\"Creates a new quorum that tracks slashable stake for operators.\"},\"createTotalDelegatedStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[])\":{\"notice\":\"Creates a new quorum that tracks total delegated stake for operators.\"},\"deregisterOperator(address,address,uint32[])\":{\"notice\":\"Called by the AllocationManager when an operator is deregistered from one or more operator sets. If this method reverts, it is ignored.\"},\"ejectOperator(address,bytes)\":{\"notice\":\"Forcibly removes an operator from specified quorums and sets their ejection timestamp.\"},\"ejectionCooldown()\":{\"notice\":\"The cooldown period after ejection before an operator can re-register.\"},\"ejector()\":{\"notice\":\"The address authorized to forcibly eject operators.\"},\"getCurrentQuorumBitmap(bytes32)\":{\"notice\":\"Returns the current quorum bitmap for an operator.\"},\"getOperator(address)\":{\"notice\":\"Returns the complete operator information for a given address.\"},\"getOperatorFromId(bytes32)\":{\"notice\":\"Returns the operator address associated with a given operator ID.\"},\"getOperatorId(address)\":{\"notice\":\"Returns the unique identifier for a given operator address.\"},\"getOperatorSetParams(uint8)\":{\"notice\":\"Returns the operator set parameters for a given quorum.\"},\"getOperatorStatus(address)\":{\"notice\":\"Returns the current registration status for a given operator.\"},\"getQuorumBitmapAtBlockNumberByIndex(bytes32,uint32,uint256)\":{\"notice\":\"Returns the quorum bitmap for an operator at a specific historical block.\"},\"getQuorumBitmapHistoryLength(bytes32)\":{\"notice\":\"Returns the number of updates in an operator's bitmap history.\"},\"getQuorumBitmapIndicesAtBlockNumber(uint32,bytes32[])\":{\"notice\":\"Returns the indices needed to look up quorum bitmaps for operators at a specific block.\"},\"getQuorumBitmapUpdateByIndex(bytes32,uint256)\":{\"notice\":\"Returns a specific update from an operator's quorum bitmap history.\"},\"indexRegistry()\":{\"notice\":\"Reference to the IndexRegistry contract.\"},\"isChurnApproverSaltUsed(bytes32)\":{\"notice\":\"Checks if a churn approver salt has been used.\"},\"lastEjectionTimestamp(address)\":{\"notice\":\"Gets the timestamp of an operator's last ejection.\"},\"pubkeyRegistrationMessageHash(address)\":{\"notice\":\"Returns the message hash that an operator must sign to register their BLS public key.\"},\"quorumCount()\":{\"notice\":\"The total number of quorums that have been created.\"},\"quorumUpdateBlockNumber(uint8)\":{\"notice\":\"Gets the last block number when all operators in a quorum were updated.\"},\"registerOperator(address,address,uint32[],bytes)\":{\"notice\":\"Called by the AllocationManager when an operator wants to register for one or more operator sets. This method should revert if registration is unsuccessful.\"},\"setAVS(address)\":{\"notice\":\"Updates the avs address for this AVS (used for UAM integration in EigenLayer)\"},\"setChurnApprover(address)\":{\"notice\":\"Updates the address authorized to approve operator churn operations.\"},\"setEjectionCooldown(uint256)\":{\"notice\":\"Updates the duration operators must wait after ejection before re-registering.\"},\"setEjector(address)\":{\"notice\":\"Updates the address authorized to forcibly eject operators.\"},\"setOperatorSetParams(uint8,(uint32,uint16,uint16))\":{\"notice\":\"Updates the configuration parameters for an existing operator set quorum.\"},\"socketRegistry()\":{\"notice\":\"Reference to the SocketRegistry contract.\"},\"stakeRegistry()\":{\"notice\":\"Reference to the StakeRegistry contract.\"},\"supportsAVS(address)\":{\"notice\":\"Returns true if the AVS is supported by the registrar\"},\"updateOperators(address[])\":{\"notice\":\"Updates stake weights for specified operators. If any operator is found to be below the minimum stake for their registered quorums, they are deregistered from those quorums.\"},\"updateOperatorsForQuorum(address[][],bytes)\":{\"notice\":\"For each quorum in `quorumNumbers`, updates the StakeRegistry's view of ALL its registered operators' stakes. Each quorum's `quorumUpdateBlockNumber` is also updated, which tracks the most recent block number when ALL registered operators were updated.\"},\"updateSocket(string)\":{\"notice\":\"Updates the socket of the msg.sender given they are a registered operator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/ISlashingRegistryCoordinator.sol\":\"ISlashingRegistryCoordinator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/\",\":@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSRegistrar.sol\":{\"keccak256\":\"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc\",\"dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAllocationManager.sol\":{\"keccak256\":\"0x9f95d00bc0a22ec850e5cc6bcda9db2485f87b627232f9360571dbe87a0ee035\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://96d1e4f044b7337f83f970202b5ce5154970bb8745646b5c0e51cab58713c811\",\"dweb:/ipfs/QmX7mkfacMVKKXJB5GixQqtfYJ3jCkQzTRu4eUy4RjBNeM\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xa38c562664300642a88b365f4a69fba58e7f3caa6bdb03ba07a03d09e4688f7f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cc7ad91a20edab3859cf06d12dd3bc69e9404a3550875e7ce7586792adfa9655\",\"dweb:/ipfs/QmW2mTG2eSLqSaexWkhYNNpjzXqHP1r8U8jUjG8LsAnEMP\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\":{\"keccak256\":\"0x705c371129ac08b9b035c1c1a1572a5e3a61b48dda8b7d8d974a7bfb88ecb7fc\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://bdb894c26fcf1b83024d006b0573663286e50d857c5dea89a9149552a971da72\",\"dweb:/ipfs/QmdqWnSPmeF9mV96uWMSN8AhVi64U818GRwFEqr6dP3UMD\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISemVerMixin.sol\":{\"keccak256\":\"0xcb910d9afbaf14c2ec32828e28ca72f1dba35c7371f487505d2a73da2c576009\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d801fbeeb84ce1dde84dcfa85d519b726f8ba928c76dc4b24d9317299a7a1ab0\",\"dweb:/ipfs/QmfAVYxxJry6GTML7jtQfoR4H1ZFpF6XYSpFZHZ8QTC61B\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtilsMixin.sol\":{\"keccak256\":\"0x5223940241400e601b40ef9b544569262aa96cd9b05efd41fdaa4eb815d1b95b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c993c65dbb74ecf6428aa73535a01a5663f4f4f536611e070b2e78937c19af10\",\"dweb:/ipfs/QmaDsP63uGvoXjrGPYtbcZyUPEEspq9QChZeP1BYrn6FcE\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0xbf084857bc21f2e3752072df667a3025ba73431eaa56852562b0dc3594361d75\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://8a5eb881299b8949063e8d7eecdadbae92f3c84a129aa58b2e5f995714fb3b23\",\"dweb:/ipfs/QmRsG6BgSS3UcXMDjjucKaNvzGjHa85ph22atnz6hzW9xo\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/OperatorSetLib.sol\":{\"keccak256\":\"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41\",\"dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/SlashingLib.sol\":{\"keccak256\":\"0xe73a53cfd201425b8230c1a9ba91ea7b12315828715c93216d3c9de0d64e0e04\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://615749ec37dc7311a76f51519892e3f4a8c56a90d6f7283d8eec79628385b071\",\"dweb:/ipfs/QmdGVLsmXASwLVVNK9uyHpuN816M7YFqEP4TWCUVu1HXLG\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c\",\"dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol\":{\"keccak256\":\"0xed2bff5f81fbc80332ee43b9b9c832d729431dde3d77d4d84681b9158dde9c37\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e1308f017d099e287d768e7fcc77b087f8d5b227ad34b5267369c956d0e98cd4\",\"dweb:/ipfs/QmcvE3Qj6LGtMxicbebREYjLKrVBxnm9gXG5JUL6FQ8Z1S\"]},\"lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol\":{\"keccak256\":\"0xe7e83446da6c25e60151015ba18816e179005e0d182ed05111d2b0c716837398\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://4466d6dc66caca35e7c96e51a70587a1c7c7a5062243bbb0fa341ee74b5706ce\",\"dweb:/ipfs/QmVm16TRhAqPmYwMQrjTzfwoJCGe1bguDTm5BqTrkiXwkB\"]},\"lib/eigenlayer-middleware/src/interfaces/ISlashingRegistryCoordinator.sol\":{\"keccak256\":\"0x3f590182117120888660c71b0a50f71f941829913b17c93e51be96cb497b93c8\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5ef8e838f7f3a599b74d0ea8c3258564ae509b19dbeb405f4cde7641080985a1\",\"dweb:/ipfs/Qmao5Q6hD4dk2MENfyxJeetFU3iFQsYBPbaKM47w5bVBvb\"]},\"lib/eigenlayer-middleware/src/interfaces/ISocketRegistry.sol\":{\"keccak256\":\"0x5d4497f995bdc0f56d242b218065a9d0b9ab7f8b47421e66cb3ae37e25674d8f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://47cfc86fd6147928011e8ab8ca3689b3cee0b155a4b01700ac7e8146012d86da\",\"dweb:/ipfs/QmcqDwW5WHKWi5arVERE1j7RikN7GuQtmfX7fpSyRu5zBe\"]},\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0x4b121355ae5a3253d2f9a873cd2b27125e5094ba1d899fe21514bc8ebb119966\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c8125d02b6556d0c2a355af0eaf44eb0e00a6a7fcf5bf542789e43f3c7552e78\",\"dweb:/ipfs/Qmeu7XWjgZZH9hmsPJXDSyBuY3ByUmvdwAQpwe2VugQnfK\"]},\"lib/eigenlayer-middleware/src/libraries/BN254.sol\":{\"keccak256\":\"0x941414cfbfb510409428e51e197e5e28be3b45fb81440e183afa0caa1f077ec7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aa245501f99b6f77564fe7e38f8130a0a6d589424bf413b2d1e46da8b5214982\",\"dweb:/ipfs/QmXCJx2GktmrbpYLnsAZ4KrResizL3JuhDjA3MNgito8AQ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"AlreadyRegisteredForQuorums"},{"inputs":[],"type":"error","name":"BitmapCannotBeZero"},{"inputs":[],"type":"error","name":"BitmapEmpty"},{"inputs":[],"type":"error","name":"CannotChurnSelf"},{"inputs":[],"type":"error","name":"CannotKickOperatorAboveThreshold"},{"inputs":[],"type":"error","name":"CannotReregisterYet"},{"inputs":[],"type":"error","name":"ChurnApproverSaltUsed"},{"inputs":[],"type":"error","name":"InputLengthMismatch"},{"inputs":[],"type":"error","name":"InsufficientStakeForChurn"},{"inputs":[],"type":"error","name":"InvalidAVS"},{"inputs":[],"type":"error","name":"InvalidRegistrationType"},{"inputs":[],"type":"error","name":"LookAheadPeriodTooLong"},{"inputs":[],"type":"error","name":"MaxOperatorCountReached"},{"inputs":[],"type":"error","name":"MaxQuorumsReached"},{"inputs":[],"type":"error","name":"NotRegistered"},{"inputs":[],"type":"error","name":"NotRegisteredForQuorum"},{"inputs":[],"type":"error","name":"NotSorted"},{"inputs":[],"type":"error","name":"OnlyAllocationManager"},{"inputs":[],"type":"error","name":"OnlyEjector"},{"inputs":[],"type":"error","name":"OperatorNotRegistered"},{"inputs":[],"type":"error","name":"OperatorNotRegisteredForQuorum"},{"inputs":[],"type":"error","name":"QuorumDoesNotExist"},{"inputs":[],"type":"error","name":"QuorumOperatorCountMismatch"},{"inputs":[{"internalType":"address","name":"prevAVS","type":"address","indexed":false},{"internalType":"address","name":"newAVS","type":"address","indexed":false}],"type":"event","name":"AVSUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"prevChurnApprover","type":"address","indexed":false},{"internalType":"address","name":"newChurnApprover","type":"address","indexed":false}],"type":"event","name":"ChurnApproverUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"prevEjectionCooldown","type":"uint256","indexed":false},{"internalType":"uint256","name":"newEjectionCooldown","type":"uint256","indexed":false}],"type":"event","name":"EjectionCooldownUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"prevEjector","type":"address","indexed":false},{"internalType":"address","name":"newEjector","type":"address","indexed":false}],"type":"event","name":"EjectorUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bytes32","name":"operatorId","type":"bytes32","indexed":true}],"type":"event","name":"OperatorDeregistered","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bytes32","name":"operatorId","type":"bytes32","indexed":true}],"type":"event","name":"OperatorRegistered","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","name":"operatorSetParams","type":"tuple","components":[{"internalType":"uint32","name":"maxOperatorCount","type":"uint32"},{"internalType":"uint16","name":"kickBIPsOfOperatorStake","type":"uint16"},{"internalType":"uint16","name":"kickBIPsOfTotalStake","type":"uint16"}],"indexed":false}],"type":"event","name":"OperatorSetParamsUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32","indexed":true},{"internalType":"string","name":"socket","type":"string","indexed":false}],"type":"event","name":"OperatorSocketUpdate","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"uint256","name":"blocknumber","type":"uint256","indexed":false}],"type":"event","name":"QuorumBlockNumberUpdated","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","name":"operatorSetParams","type":"tuple","components":[{"internalType":"uint32","name":"maxOperatorCount","type":"uint32"},{"internalType":"uint16","name":"kickBIPsOfOperatorStake","type":"uint16"},{"internalType":"uint16","name":"kickBIPsOfTotalStake","type":"uint16"}],"indexed":false},{"internalType":"uint96","name":"minimumStake","type":"uint96","indexed":false},{"internalType":"struct IStakeRegistryTypes.StrategyParams[]","name":"strategyParams","type":"tuple[]","components":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint96","name":"multiplier","type":"uint96"}],"indexed":false},{"internalType":"enum IStakeRegistryTypes.StakeType","name":"stakeType","type":"uint8","indexed":false},{"internalType":"uint32","name":"lookAheadPeriod","type":"uint32","indexed":false}],"type":"event","name":"QuorumCreated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"OPERATOR_CHURN_APPROVAL_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"PUBKEY_REGISTRATION_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"allocationManager","outputs":[{"internalType":"contract IAllocationManager","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"avs","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"blsApkRegistry","outputs":[{"internalType":"contract IBLSApkRegistry","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"registeringOperator","type":"address"},{"internalType":"bytes32","name":"registeringOperatorId","type":"bytes32"},{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorKickParam[]","name":"operatorKickParams","type":"tuple[]","components":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"address","name":"operator","type":"address"}]},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256","name":"expiry","type":"uint256"}],"stateMutability":"view","type":"function","name":"calculateOperatorChurnApprovalDigestHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"calculatePubkeyRegistrationMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"churnApprover","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","name":"operatorSetParams","type":"tuple","components":[{"internalType":"uint32","name":"maxOperatorCount","type":"uint32"},{"internalType":"uint16","name":"kickBIPsOfOperatorStake","type":"uint16"},{"internalType":"uint16","name":"kickBIPsOfTotalStake","type":"uint16"}]},{"internalType":"uint96","name":"minimumStake","type":"uint96"},{"internalType":"struct IStakeRegistryTypes.StrategyParams[]","name":"strategyParams","type":"tuple[]","components":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint96","name":"multiplier","type":"uint96"}]},{"internalType":"uint32","name":"lookAheadPeriod","type":"uint32"}],"stateMutability":"nonpayable","type":"function","name":"createSlashableStakeQuorum"},{"inputs":[{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","name":"operatorSetParams","type":"tuple","components":[{"internalType":"uint32","name":"maxOperatorCount","type":"uint32"},{"internalType":"uint16","name":"kickBIPsOfOperatorStake","type":"uint16"},{"internalType":"uint16","name":"kickBIPsOfTotalStake","type":"uint16"}]},{"internalType":"uint96","name":"minimumStake","type":"uint96"},{"internalType":"struct IStakeRegistryTypes.StrategyParams[]","name":"strategyParams","type":"tuple[]","components":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint96","name":"multiplier","type":"uint96"}]}],"stateMutability":"nonpayable","type":"function","name":"createTotalDelegatedStakeQuorum"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32[]","name":"operatorSetIds","type":"uint32[]"}],"stateMutability":"nonpayable","type":"function","name":"deregisterOperator"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes","name":"quorumNumbers","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"ejectOperator"},{"inputs":[],"stateMutability":"view","type":"function","name":"ejectionCooldown","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"ejector","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getCurrentQuorumBitmap","outputs":[{"internalType":"uint192","name":"","type":"uint192"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getOperator","outputs":[{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorInfo","name":"","type":"tuple","components":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"enum ISlashingRegistryCoordinatorTypes.OperatorStatus","name":"status","type":"uint8"}]}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getOperatorFromId","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getOperatorId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"getOperatorSetParams","outputs":[{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","name":"","type":"tuple","components":[{"internalType":"uint32","name":"maxOperatorCount","type":"uint32"},{"internalType":"uint16","name":"kickBIPsOfOperatorStake","type":"uint16"},{"internalType":"uint16","name":"kickBIPsOfTotalStake","type":"uint16"}]}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getOperatorStatus","outputs":[{"internalType":"enum ISlashingRegistryCoordinatorTypes.OperatorStatus","name":"","type":"uint8"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint32","name":"blockNumber","type":"uint32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getQuorumBitmapAtBlockNumberByIndex","outputs":[{"internalType":"uint192","name":"","type":"uint192"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getQuorumBitmapHistoryLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint32","name":"blockNumber","type":"uint32"},{"internalType":"bytes32[]","name":"operatorIds","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"getQuorumBitmapIndicesAtBlockNumber","outputs":[{"internalType":"uint32[]","name":"","type":"uint32[]"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getQuorumBitmapUpdateByIndex","outputs":[{"internalType":"struct ISlashingRegistryCoordinatorTypes.QuorumBitmapUpdate","name":"","type":"tuple","components":[{"internalType":"uint32","name":"updateBlockNumber","type":"uint32"},{"internalType":"uint32","name":"nextUpdateBlockNumber","type":"uint32"},{"internalType":"uint192","name":"quorumBitmap","type":"uint192"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"indexRegistry","outputs":[{"internalType":"contract IIndexRegistry","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isChurnApproverSaltUsed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"lastEjectionTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"pubkeyRegistrationMessageHash","outputs":[{"internalType":"struct BN254.G1Point","name":"","type":"tuple","components":[{"internalType":"uint256","name":"X","type":"uint256"},{"internalType":"uint256","name":"Y","type":"uint256"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"quorumCount","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"quorumUpdateBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32[]","name":"operatorSetIds","type":"uint32[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerOperator"},{"inputs":[{"internalType":"address","name":"_avs","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setAVS"},{"inputs":[{"internalType":"address","name":"_churnApprover","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setChurnApprover"},{"inputs":[{"internalType":"uint256","name":"_ejectionCooldown","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setEjectionCooldown"},{"inputs":[{"internalType":"address","name":"_ejector","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setEjector"},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"struct ISlashingRegistryCoordinatorTypes.OperatorSetParam","name":"operatorSetParams","type":"tuple","components":[{"internalType":"uint32","name":"maxOperatorCount","type":"uint32"},{"internalType":"uint16","name":"kickBIPsOfOperatorStake","type":"uint16"},{"internalType":"uint16","name":"kickBIPsOfTotalStake","type":"uint16"}]}],"stateMutability":"nonpayable","type":"function","name":"setOperatorSetParams"},{"inputs":[],"stateMutability":"view","type":"function","name":"socketRegistry","outputs":[{"internalType":"contract ISocketRegistry","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"stakeRegistry","outputs":[{"internalType":"contract IStakeRegistry","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"avs","type":"address"}],"stateMutability":"view","type":"function","name":"supportsAVS","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address[]","name":"operators","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"updateOperators"},{"inputs":[{"internalType":"address[][]","name":"operatorsPerQuorum","type":"address[][]"},{"internalType":"bytes","name":"quorumNumbers","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"updateOperatorsForQuorum"},{"inputs":[{"internalType":"string","name":"socket","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"updateSocket"}],"devdoc":{"kind":"dev","methods":{"OPERATOR_CHURN_APPROVAL_TYPEHASH()":{"returns":{"_0":"The typehash constant."}},"PUBKEY_REGISTRATION_TYPEHASH()":{"returns":{"_0":"The typehash constant."}},"allocationManager()":{"details":"This is only relevant for Slashing AVSs","returns":{"_0":"The AllocationManager contract interface."}},"avs()":{"details":"NOTE: Updating this value will break existing OperatorSets and UAM integration. This value should only be set once.","returns":{"_0":"The avs address"}},"blsApkRegistry()":{"returns":{"_0":"The BLSApkRegistry contract interface."}},"calculateOperatorChurnApprovalDigestHash(address,bytes32,(uint8,address)[],bytes32,uint256)":{"params":{"expiry":"Timestamp after which the signature becomes invalid.","operatorKickParams":"Parameters specifying which operators to replace in full quorums.","registeringOperator":"The address of the operator attempting to register.","registeringOperatorId":"The unique ID of the registering operator.","salt":"Random value to ensure signature uniqueness."},"returns":{"_0":"The EIP-712 typed data hash to be signed."}},"calculatePubkeyRegistrationMessageHash(address)":{"params":{"operator":"The operator's Ethereum address"}},"churnApprover()":{"returns":{"_0":"The churn approver address."}},"createSlashableStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[],uint32)":{"details":"Can only be called when operator sets are enabled.","params":{"lookAheadPeriod":"The number of blocks to look ahead when calculating slashable stake.","minimumStake":"Sets the minimum stake required for an operator to register or remain registered.","operatorSetParams":"Configures the quorum's max operator count and churn parameters.","strategyParams":"A list of strategies and multipliers used by the StakeRegistry to calculate an operator's stake weight for the quorum."}},"createTotalDelegatedStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[])":{"details":"For m2 AVS this function has the same behavior as createQuorum before.For migrated AVS that enable operator sets this will create a quorum that measures total delegated stake for operator set.","params":{"minimumStake":"Sets the minimum stake required for an operator to register or remain registered.","operatorSetParams":"Configures the quorum's max operator count and churn parameters.","strategyParams":"A list of strategies and multipliers used by the StakeRegistry to calculate an operator's stake weight for the quorum."}},"deregisterOperator(address,address,uint32[])":{"params":{"avs":"the AVS the operator is deregistering from. This should be the same as IAVSRegistrar.avs()","operator":"the deregistering operator","operatorSetIds":"the list of operator set ids being deregistered from"}},"ejectOperator(address,bytes)":{"details":"Can only be called by the ejector address.The operator cannot re-register until ejectionCooldown period has passed.","params":{"operator":"The operator address to eject.","quorumNumbers":"The quorum numbers to eject the operator from."}},"ejectionCooldown()":{"returns":{"_0":"The cooldown duration in seconds."}},"ejector()":{"returns":{"_0":"The ejector address."}},"getCurrentQuorumBitmap(bytes32)":{"details":"Returns 0 if the operator is not registered for any quorums.","params":{"operatorId":"The operator's unique identifier."},"returns":{"_0":"A bitmap where each bit represents registration in a specific quorum."}},"getOperator(address)":{"params":{"operator":"The operator address to query."},"returns":{"_0":"An OperatorInfo struct containing the operator's ID and registration status."}},"getOperatorFromId(bytes32)":{"details":"Returns address(0) if the ID is not registered.","params":{"operatorId":"The unique identifier to look up."},"returns":{"_0":"The operator's address."}},"getOperatorId(address)":{"params":{"operator":"The operator address to query."},"returns":{"_0":"The operator's ID (derived from their BLS public key hash)."}},"getOperatorSetParams(uint8)":{"params":{"quorumNumber":"The identifier of the quorum to query."},"returns":{"_0":"The OperatorSetParam struct containing max operator count and churn thresholds."}},"getOperatorStatus(address)":{"params":{"operator":"The operator address to query."},"returns":{"_0":"The operator's status (NEVER_REGISTERED, REGISTERED, or DEREGISTERED)."}},"getQuorumBitmapAtBlockNumberByIndex(bytes32,uint32,uint256)":{"details":"Reverts if the index is incorrect for the specified block number.","params":{"blockNumber":"The historical block number to query.","index":"The index in the operator's bitmap history (from getQuorumBitmapIndicesAtBlockNumber).","operatorId":"The operator's unique identifier."},"returns":{"_0":"The quorum bitmap showing which quorums the operator was registered for."}},"getQuorumBitmapHistoryLength(bytes32)":{"params":{"operatorId":"The operator's unique identifier."},"returns":{"_0":"The length of the bitmap history array."}},"getQuorumBitmapIndicesAtBlockNumber(uint32,bytes32[])":{"details":"Reverts if any operator had not yet registered at the specified block.This function is designed to find proper inputs for getQuorumBitmapAtBlockNumberByIndex.","params":{"blockNumber":"The historical block number to query.","operatorIds":"Array of operator IDs to get indices for."},"returns":{"_0":"Array of indices corresponding to each operator ID."}},"getQuorumBitmapUpdateByIndex(bytes32,uint256)":{"params":{"index":"The index in the bitmap history to query.","operatorId":"The operator's unique identifier."},"returns":{"_0":"The QuorumBitmapUpdate struct at that index."}},"indexRegistry()":{"returns":{"_0":"The IndexRegistry contract interface."}},"isChurnApproverSaltUsed(bytes32)":{"params":{"salt":"The salt to check."},"returns":{"_0":"True if the salt has been used, false otherwise."}},"lastEjectionTimestamp(address)":{"params":{"operator":"The operator address."},"returns":{"_0":"The timestamp of the last ejection."}},"pubkeyRegistrationMessageHash(address)":{"params":{"operator":"The address of the operator registering their key."},"returns":{"_0":"A point on the G1 curve representing the message hash."}},"quorumCount()":{"returns":{"_0":"The count of quorums."}},"quorumUpdateBlockNumber(uint8)":{"params":{"quorumNumber":"The quorum identifier."},"returns":{"_0":"The block number of the last update."}},"registerOperator(address,address,uint32[],bytes)":{"params":{"avs":"the AVS the operator is registering for. This should be the same as IAVSRegistrar.avs()","data":"arbitrary data the operator can provide as part of registration","operator":"the registering operator","operatorSetIds":"the list of operator set ids being registered for"}},"setAVS(address)":{"details":"Can only be called by the contract ownerNOTE: Updating this value will break existing OperatorSets and UAM integration. This value should only be set once.","params":{"_avs":"The new avs address"}},"setChurnApprover(address)":{"details":"Can only be called by the contract owner.The churn approver is responsible for signing off on operator replacements in full quorums.","params":{"_churnApprover":"The new churn approver address."}},"setEjectionCooldown(uint256)":{"details":"Can only be called by the contract owner.","params":{"_ejectionCooldown":"The new cooldown duration in seconds."}},"setEjector(address)":{"details":"Can only be called by the contract owner.The ejector can force-remove operators from quorums regardless of their stake.","params":{"_ejector":"The new ejector address."}},"setOperatorSetParams(uint8,(uint32,uint16,uint16))":{"details":"Can only be called by the contract owner.","params":{"operatorSetParams":"The new operator set parameters to apply.","quorumNumber":"The identifier of the quorum to update."}},"socketRegistry()":{"returns":{"_0":"The SocketRegistry contract interface."}},"stakeRegistry()":{"returns":{"_0":"The StakeRegistry contract interface."}},"supportsAVS(address)":{"params":{"avs":"the AVS to check"},"returns":{"_0":"true if the AVS is supported, false otherwise"}},"updateOperators(address[])":{"details":"Stakes are queried from the Eigenlayer core DelegationManager contract.WILL BE DEPRECATED IN FAVOR OF updateOperatorsForQuorum","params":{"operators":"The operators whose stakes should be updated."}},"updateOperatorsForQuorum(address[][],bytes)":{"details":"stakes are queried from the Eigenlayer core DelegationManager contractEach list of operator addresses MUST be sorted in ascending orderEach list of operator addresses MUST represent the entire list of registered operators for the corresponding quoruminvariant: Each list of `operatorsPerQuorum` MUST be a sorted version of `IndexRegistry.getOperatorListAtBlockNumber` for the corresponding quorum.note on race condition: if an operator registers/deregisters for any quorum in `quorumNumbers` after a txn to this method is broadcast (but before it is executed), the method will fail","params":{"operatorsPerQuorum":"for each quorum in `quorumNumbers`, this has a corresponding list of operators to update.","quorumNumbers":"is an ordered byte array containing the quorum numbers being updated"}},"updateSocket(string)":{"details":"Will revert if msg.sender is not a registered operator.","params":{"socket":"The new socket address for the operator (typically an IP address)."}}},"version":1},"userdoc":{"kind":"user","methods":{"OPERATOR_CHURN_APPROVAL_TYPEHASH()":{"notice":"EIP-712 typehash for operator churn approval signatures."},"PUBKEY_REGISTRATION_TYPEHASH()":{"notice":"EIP-712 typehash for pubkey registration signatures."},"allocationManager()":{"notice":"Reference to the AllocationManager contract."},"avs()":{"notice":"Returns the avs address for this AVS (used for UAM integration in EigenLayer)"},"blsApkRegistry()":{"notice":"Reference to the BLSApkRegistry contract."},"calculateOperatorChurnApprovalDigestHash(address,bytes32,(uint8,address)[],bytes32,uint256)":{"notice":"Calculates the digest hash that must be signed by the churn approver."},"calculatePubkeyRegistrationMessageHash(address)":{"notice":"Returns the hash of the message that operators must sign with their BLS key to register"},"churnApprover()":{"notice":"The address authorized to approve operator churn operations."},"createSlashableStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[],uint32)":{"notice":"Creates a new quorum that tracks slashable stake for operators."},"createTotalDelegatedStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[])":{"notice":"Creates a new quorum that tracks total delegated stake for operators."},"deregisterOperator(address,address,uint32[])":{"notice":"Called by the AllocationManager when an operator is deregistered from one or more operator sets. If this method reverts, it is ignored."},"ejectOperator(address,bytes)":{"notice":"Forcibly removes an operator from specified quorums and sets their ejection timestamp."},"ejectionCooldown()":{"notice":"The cooldown period after ejection before an operator can re-register."},"ejector()":{"notice":"The address authorized to forcibly eject operators."},"getCurrentQuorumBitmap(bytes32)":{"notice":"Returns the current quorum bitmap for an operator."},"getOperator(address)":{"notice":"Returns the complete operator information for a given address."},"getOperatorFromId(bytes32)":{"notice":"Returns the operator address associated with a given operator ID."},"getOperatorId(address)":{"notice":"Returns the unique identifier for a given operator address."},"getOperatorSetParams(uint8)":{"notice":"Returns the operator set parameters for a given quorum."},"getOperatorStatus(address)":{"notice":"Returns the current registration status for a given operator."},"getQuorumBitmapAtBlockNumberByIndex(bytes32,uint32,uint256)":{"notice":"Returns the quorum bitmap for an operator at a specific historical block."},"getQuorumBitmapHistoryLength(bytes32)":{"notice":"Returns the number of updates in an operator's bitmap history."},"getQuorumBitmapIndicesAtBlockNumber(uint32,bytes32[])":{"notice":"Returns the indices needed to look up quorum bitmaps for operators at a specific block."},"getQuorumBitmapUpdateByIndex(bytes32,uint256)":{"notice":"Returns a specific update from an operator's quorum bitmap history."},"indexRegistry()":{"notice":"Reference to the IndexRegistry contract."},"isChurnApproverSaltUsed(bytes32)":{"notice":"Checks if a churn approver salt has been used."},"lastEjectionTimestamp(address)":{"notice":"Gets the timestamp of an operator's last ejection."},"pubkeyRegistrationMessageHash(address)":{"notice":"Returns the message hash that an operator must sign to register their BLS public key."},"quorumCount()":{"notice":"The total number of quorums that have been created."},"quorumUpdateBlockNumber(uint8)":{"notice":"Gets the last block number when all operators in a quorum were updated."},"registerOperator(address,address,uint32[],bytes)":{"notice":"Called by the AllocationManager when an operator wants to register for one or more operator sets. This method should revert if registration is unsuccessful."},"setAVS(address)":{"notice":"Updates the avs address for this AVS (used for UAM integration in EigenLayer)"},"setChurnApprover(address)":{"notice":"Updates the address authorized to approve operator churn operations."},"setEjectionCooldown(uint256)":{"notice":"Updates the duration operators must wait after ejection before re-registering."},"setEjector(address)":{"notice":"Updates the address authorized to forcibly eject operators."},"setOperatorSetParams(uint8,(uint32,uint16,uint16))":{"notice":"Updates the configuration parameters for an existing operator set quorum."},"socketRegistry()":{"notice":"Reference to the SocketRegistry contract."},"stakeRegistry()":{"notice":"Reference to the StakeRegistry contract."},"supportsAVS(address)":{"notice":"Returns true if the AVS is supported by the registrar"},"updateOperators(address[])":{"notice":"Updates stake weights for specified operators. If any operator is found to be below the minimum stake for their registered quorums, they are deregistered from those quorums."},"updateOperatorsForQuorum(address[][],bytes)":{"notice":"For each quorum in `quorumNumbers`, updates the StakeRegistry's view of ALL its registered operators' stakes. Each quorum's `quorumUpdateBlockNumber` is also updated, which tracks the most recent block number when ALL registered operators were updated."},"updateSocket(string)":{"notice":"Updates the socket of the msg.sender given they are a registered operator."}},"version":1}},"settings":{"remappings":["@eigenlayer-middleware/=lib/eigenlayer-middleware/","@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/","@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/","@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/","zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/eigenlayer-middleware/src/interfaces/ISlashingRegistryCoordinator.sol":"ISlashingRegistryCoordinator"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSRegistrar.sol":{"keccak256":"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d","urls":["bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc","dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAllocationManager.sol":{"keccak256":"0x9f95d00bc0a22ec850e5cc6bcda9db2485f87b627232f9360571dbe87a0ee035","urls":["bzz-raw://96d1e4f044b7337f83f970202b5ce5154970bb8745646b5c0e51cab58713c811","dweb:/ipfs/QmX7mkfacMVKKXJB5GixQqtfYJ3jCkQzTRu4eUy4RjBNeM"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"keccak256":"0xa38c562664300642a88b365f4a69fba58e7f3caa6bdb03ba07a03d09e4688f7f","urls":["bzz-raw://cc7ad91a20edab3859cf06d12dd3bc69e9404a3550875e7ce7586792adfa9655","dweb:/ipfs/QmW2mTG2eSLqSaexWkhYNNpjzXqHP1r8U8jUjG8LsAnEMP"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol":{"keccak256":"0x705c371129ac08b9b035c1c1a1572a5e3a61b48dda8b7d8d974a7bfb88ecb7fc","urls":["bzz-raw://bdb894c26fcf1b83024d006b0573663286e50d857c5dea89a9149552a971da72","dweb:/ipfs/QmdqWnSPmeF9mV96uWMSN8AhVi64U818GRwFEqr6dP3UMD"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISemVerMixin.sol":{"keccak256":"0xcb910d9afbaf14c2ec32828e28ca72f1dba35c7371f487505d2a73da2c576009","urls":["bzz-raw://d801fbeeb84ce1dde84dcfa85d519b726f8ba928c76dc4b24d9317299a7a1ab0","dweb:/ipfs/QmfAVYxxJry6GTML7jtQfoR4H1ZFpF6XYSpFZHZ8QTC61B"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtilsMixin.sol":{"keccak256":"0x5223940241400e601b40ef9b544569262aa96cd9b05efd41fdaa4eb815d1b95b","urls":["bzz-raw://c993c65dbb74ecf6428aa73535a01a5663f4f4f536611e070b2e78937c19af10","dweb:/ipfs/QmaDsP63uGvoXjrGPYtbcZyUPEEspq9QChZeP1BYrn6FcE"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"keccak256":"0xbf084857bc21f2e3752072df667a3025ba73431eaa56852562b0dc3594361d75","urls":["bzz-raw://8a5eb881299b8949063e8d7eecdadbae92f3c84a129aa58b2e5f995714fb3b23","dweb:/ipfs/QmRsG6BgSS3UcXMDjjucKaNvzGjHa85ph22atnz6hzW9xo"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/OperatorSetLib.sol":{"keccak256":"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812","urls":["bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41","dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/SlashingLib.sol":{"keccak256":"0xe73a53cfd201425b8230c1a9ba91ea7b12315828715c93216d3c9de0d64e0e04","urls":["bzz-raw://615749ec37dc7311a76f51519892e3f4a8c56a90d6f7283d8eec79628385b071","dweb:/ipfs/QmdGVLsmXASwLVVNK9uyHpuN816M7YFqEP4TWCUVu1HXLG"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol":{"keccak256":"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b","urls":["bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c","dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis"],"license":"MIT"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3","urls":["bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c","dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"],"license":"MIT"},"lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol":{"keccak256":"0xed2bff5f81fbc80332ee43b9b9c832d729431dde3d77d4d84681b9158dde9c37","urls":["bzz-raw://e1308f017d099e287d768e7fcc77b087f8d5b227ad34b5267369c956d0e98cd4","dweb:/ipfs/QmcvE3Qj6LGtMxicbebREYjLKrVBxnm9gXG5JUL6FQ8Z1S"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol":{"keccak256":"0xe7e83446da6c25e60151015ba18816e179005e0d182ed05111d2b0c716837398","urls":["bzz-raw://4466d6dc66caca35e7c96e51a70587a1c7c7a5062243bbb0fa341ee74b5706ce","dweb:/ipfs/QmVm16TRhAqPmYwMQrjTzfwoJCGe1bguDTm5BqTrkiXwkB"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/interfaces/ISlashingRegistryCoordinator.sol":{"keccak256":"0x3f590182117120888660c71b0a50f71f941829913b17c93e51be96cb497b93c8","urls":["bzz-raw://5ef8e838f7f3a599b74d0ea8c3258564ae509b19dbeb405f4cde7641080985a1","dweb:/ipfs/Qmao5Q6hD4dk2MENfyxJeetFU3iFQsYBPbaKM47w5bVBvb"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/interfaces/ISocketRegistry.sol":{"keccak256":"0x5d4497f995bdc0f56d242b218065a9d0b9ab7f8b47421e66cb3ae37e25674d8f","urls":["bzz-raw://47cfc86fd6147928011e8ab8ca3689b3cee0b155a4b01700ac7e8146012d86da","dweb:/ipfs/QmcqDwW5WHKWi5arVERE1j7RikN7GuQtmfX7fpSyRu5zBe"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol":{"keccak256":"0x4b121355ae5a3253d2f9a873cd2b27125e5094ba1d899fe21514bc8ebb119966","urls":["bzz-raw://c8125d02b6556d0c2a355af0eaf44eb0e00a6a7fcf5bf542789e43f3c7552e78","dweb:/ipfs/Qmeu7XWjgZZH9hmsPJXDSyBuY3ByUmvdwAQpwe2VugQnfK"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/libraries/BN254.sol":{"keccak256":"0x941414cfbfb510409428e51e197e5e28be3b45fb81440e183afa0caa1f077ec7","urls":["bzz-raw://aa245501f99b6f77564fe7e38f8130a0a6d589424bf413b2d1e46da8b5214982","dweb:/ipfs/QmXCJx2GktmrbpYLnsAZ4KrResizL3JuhDjA3MNgito8AQ"],"license":"MIT"}},"version":1},"id":117}